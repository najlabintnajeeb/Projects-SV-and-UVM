
## Overview

This repository contains a SystemVerilog verification environment for a synchronous FIFO (First-In, First-Out) module.  It utilizes a UVM-like (though perhaps not fully compliant) structure to provide a comprehensive and configurable testbench.  The environment includes:

*   **`synchronous_fifo.sv`:** The Design Under Test (DUT) - the SystemVerilog code for the FIFO module itself.
*   **`interface.sv`:** A SystemVerilog interface defining the signals used for communication between the testbench and the DUT.
*   **`transaction.sv`:**  Defines the `transaction` class, which encapsulates the data and control signals for a single FIFO operation (read or write).  Includes coverage group to monitor important aspects of transaction.
*   **`generator.sv`:**  The transaction generator, which creates randomized transactions and sends them to the driver.
*   **`driver.sv`:**  The driver, which drives the generated transactions onto the DUT's input signals.
*   **`monitor.sv`:**  The monitor, which observes the DUT's output signals and captures transactions for analysis by the scoreboard.
*   **`scoreboard.sv`:**  The scoreboard, which compares the actual output of the FIFO with the expected output to verify correct behavior.
*   **`environment.sv`:**  The environment, which connects and coordinates all of the testbench components (generator, driver, monitor, scoreboard).
*   **`test.sv` (and variants like `wr_rd_test.sv`, `read_only.sv`, `write_only.sv`):**  The top-level test program that sets up the environment, configures the generator, and runs the simulation.
*   **`tbench_top.sv`:** The top-level module instantiating the DUT, interface, and test program.  Also generates clock and reset.
*   **`dump.vcd`:** (Generated) The waveform dump file, which contains the simulation results for debugging.

## Directory Structure

```
fifo_verification/
├── synchronous_fifo.sv       # FIFO Design Under Test
├── interface.sv             # Interface definition
├── transaction.sv           # Transaction class definition
├── generator.sv             # Transaction generator
├── driver.sv                # Driver
├── monitor.sv               # Monitor
├── scoreboard.sv            # Scoreboard
├── environment.sv          # Testbench environment
├── test.sv                  # Test program (alternating read/write test)
├── wr_rd_test.sv            # Test program (alternating read/write test, included from tbench_top.sv)
├── read_only.sv             # Test program (read-only test, included from tbench_top.sv)
├── write_only.sv            # Test program (write-only test, included from tbench_top.sv)
├── tbench_top.sv            # Top-level module for simulation
├── README.md                # This file
└── dump.vcd                  # (Generated) Waveform dump file
```

## Requirements

*   A SystemVerilog simulator (e.g., Cadence Xcelium, Mentor Graphics QuestaSim, Synopsys VCS).
*   Basic understanding of SystemVerilog and UVM (Universal Verification Methodology) concepts.

## Simulation Setup and Execution

1.  **Clone the repository:**

    ```bash
    git clone [repository_url]
    cd fifo_verification
    ```

2.  **Configure your simulator:**  Refer to your simulator's documentation for instructions on how to set up a project and add the SystemVerilog files.

3.  **Compile the code:**  Compile all the SystemVerilog files in the correct order.  Typically, the interface and transaction class should be compiled before the other components.
    Example for QuestaSim (adjust for your simulator):

    ```bash
    vlog -sv interface.sv
    vlog -sv transaction.sv
    vlog -sv generator.sv
    vlog -sv driver.sv
    vlog -sv monitor.sv
    vlog -sv scoreboard.sv
    vlog -sv environment.sv
    vlog -sv wr_rd_test.sv  # Or choose another test program
    vlog -sv tbench_top.sv
    ```

4.  **Run the simulation:**  Simulate the `tbench_top` module.
    Example for QuestaSim:

    ```bash
    vsim -voptargs="+acc" tbench_top
    run -all
    ```
    **Important:**  Choose one of the test programs (`wr_rd_test.sv`, `read_only.sv`, `write_only.sv`) by uncommenting it in `tbench_top.sv` and commenting out the others.  Only one test program should be included at a time.

5.  **Analyze the results:**
    *   View the waveform in `dump.vcd` using a waveform viewer (e.g., GTKWave, QuestaSim's waveform viewer).
    *   Examine the console output for simulation messages, errors, and scoreboard results.
    *   Review the coverage reports generated by the simulator (if coverage analysis is enabled).

## Key Components and Functionality

*   **`synchronous_fifo.sv`:**
    *   Implements a synchronous FIFO with configurable depth and data width.
    *   Has input signals for write enable, read enable, and data input.
    *   Has output signals for data output, full flag, and empty flag.

*   **`interface.sv`:**
    *   Defines the `intf` interface, which bundles the signals connecting the testbench to the DUT.
    *   Includes clock and reset signals.
    *   Defines clocking blocks for driving and monitoring signals.

*   **`transaction.sv`:**
    *   Defines the `transaction` class, which represents a single FIFO operation (read or write).
    *   Contains `w_en`, `r_en`, `data_in`, `data_out`, `full`, and `empty` signals.
    *   Includes constraints to ensure valid transaction behavior (e.g., preventing simultaneous read and write).
    *   Contains a covergroup `cg` with coverpoints for `data_in`, `full`, `empty`, and cross-coverage for various combinations.
    * Added flags to disable the low-end data during certain corner cases.

*   **`generator.sv`:**
    *   Generates randomized `transaction` objects.
    *   Sends the generated transactions to the driver via a mailbox.
    *   Controls the number of transactions to generate.

*   **`driver.sv`:**
    *   Receives `transaction` objects from the generator via a mailbox.
    *   Drives the `w_en`, `r_en`, and `data_in` signals of the DUT based on the transaction data.
    *   Handles reset.

*   **`monitor.sv`:**
    *   Monitors the `w_en`, `r_en`, `data_in`, `data_out`, `full`, and `empty` signals of the DUT.
    *   Captures `transaction` objects based on the observed signals.
    *   Sends the captured transactions to the scoreboard via a mailbox.
* Samples the functional coverage

*   **`scoreboard.sv`:**
    *   Receives `transaction` objects from the monitor via a mailbox.
    *   Simulates the behavior of the FIFO using a queue.
    *   Compares the `data_out`, `full`, and `empty` signals from the DUT with the expected values based on the FIFO queue.
    *   Reports the number of passes and failures.

*   **`environment.sv`:**
    *   Instantiates and connects all the testbench components (generator, driver, monitor, scoreboard).
    *   Manages the mailboxes used for communication between components.
    *   Orchestrates the test execution (reset, generation, driving, monitoring, scoring).

*   **`test.sv` (and variants):**
    *   Top-level test program that sets up the environment and runs the simulation.
    *   Configures the generator (e.g., sets the number of transactions).
    *   Can be customized to test different FIFO scenarios (e.g., write-only, read-only, alternating read/write).

## Running Specific Tests
*   **`wr_rd_test.sv`**: Write/Read Test

    *  This test program is designed to verify the basic write and read functionality of the FIFO (First-In-First-Out) module.
*   **`read_only.sv`**: Read Only Test
*   **`write_only.sv`**: Write Only Test
    * This test program focuses on testing the FIFO module's ability to handle write operations without any read attempts.

## Coverage

The `transaction` class includes a `covergroup` (`cg`) that monitors:

*   **`data_in`:**  Covers the range of input data values.
*   **`full`:**  Covers the FIFO full status.
*   **`empty`:**  Covers the FIFO empty status.
*   **Cross-coverage:**  Covers combinations of `full`, `empty`, `w_en`, and `r_en` to detect corner cases like writing to a full FIFO or reading from an empty FIFO.
*   **Exclusion Flags:** Flags have been added to exclude coverage during test corner cases.

Enable coverage analysis in your simulator to generate coverage reports.

## Customization

*   **FIFO Depth and Data Width:**  Modify the `DEPTH` and `DATA_WIDTH` parameters in `synchronous_fifo.sv`, `transaction.sv`, and `tbench_top.sv` to change the FIFO's characteristics.
*   **Number of Transactions:**  Modify the `repeat_count` variable in `test.sv` to change the number of transactions generated.
*   **Test Scenarios:**  Create new test programs (like `write_only.sv` or `read_only.sv`) to test specific FIFO scenarios.
*   **Constraints:**  Add or modify constraints in the `transaction` class to generate different types of transactions.
*   **Coverage Points:**  Add or modify coverpoints in the `covergroup` in the `transaction` class to monitor different aspects of the FIFO's behavior.
*   **Exclusion Logic:** Modify exclusion logic in the test programs to ensure the correct transactions are run.
*   **Sequences:** Add constraints to your sequences to ensure better randomization.

## Limitations

*   This is a relatively simple verification environment and may not cover all possible FIFO corner cases.
*   The UVM structure is simplified and may not be fully compliant with the UVM standard.
*   The coverage is limited to the coverpoints defined in the `transaction` class.
*   The `environment.sv` could be re-written to be parameterized.

## Future 

*   Add more complex test scenarios (e.g., burst writes, burst reads, error injection).
*   Implement a more complete UVM-compliant testbench.
*   Add more coverage points to increase coverage.
*   Implement a functional coverage model.
*   Add assertions to check for design errors.
*   Incorporate Formal Verification methods for exhaustive checking.


